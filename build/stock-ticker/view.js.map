{"version":3,"file":"stock-ticker/view.js","mappings":";;;;AAAA;AACA,MAAMA,cAAc,GAAG,MAAAA,CAAOC,MAAM,EAAEC,MAAM,KAAK;EAC7C,MAAMC,QAAQ,GAAG,0CAA0CF,MAAM,UAAUC,MAAM,EAAE;EACnF,MAAME,UAAU,GAAG,mDAAmDH,MAAM,UAAUC,MAAM,EAAE;EAE9F,IAAI;IACA,MAAM,CAACG,aAAa,EAAEC,eAAe,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDC,KAAK,CAACN,QAAQ,CAAC,EACfM,KAAK,CAACL,UAAU,CAAC,CACpB,CAAC;IAEF,MAAMM,SAAS,GAAG,MAAML,aAAa,CAACM,IAAI,CAAC,CAAC;IAC5C,MAAMC,WAAW,GAAG,MAAMN,eAAe,CAACK,IAAI,CAAC,CAAC;IAEhD,IAAID,SAAS,CAACG,CAAC,KAAK,CAAC,IAAI,CAACD,WAAW,CAACE,IAAI,EAAE;MACxC,OAAO;QAAEC,KAAK,EAAE;MAAyB,CAAC;IAC9C;IAEA,OAAO;MACHC,WAAW,EAAEJ,WAAW,CAACE,IAAI;MAC7Bb,MAAM,EAAEA,MAAM,CAACgB,WAAW,CAAC,CAAC;MAC5BC,KAAK,EAAER,SAAS,CAACS,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;MAC7BC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC;IACxC,CAAC;EACL,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZS,OAAO,CAACT,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MAAEA,KAAK,EAAE;IAA8B,CAAC;EACnD;AACJ,CAAC;;AAED;AACA,MAAMU,eAAe,GAAGA,CAACC,OAAO,EAAEC,IAAI,KAAK;EACvC,IAAIA,IAAI,CAACZ,KAAK,EAAE;IACZW,OAAO,CAACE,SAAS,GAAG,iCAAiCD,IAAI,CAACZ,KAAK,MAAM;IACrE;EACJ;EAEA,MAAMc,IAAI,GAAG;AACjB;AACA,+CAA+CF,IAAI,CAACX,WAAW;AAC/D;AACA,kEAAkEW,IAAI,CAAC1B,MAAM;AAC7E;AACA;AACA,kEAAkE0B,IAAI,CAACT,KAAK;AAC5E;AACA;AACA,wEAAwES,IAAI,CAACN,IAAI;AACjF;AACA;AACA,KAAK;EACDK,OAAO,CAACE,SAAS,GAAGC,IAAI;AAC5B,CAAC;;AAED;AACAC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAChD,MAAMC,iBAAiB,GAAGF,QAAQ,CAACG,gBAAgB,CAAC,qCAAqC,CAAC;EAE1FD,iBAAiB,CAACE,OAAO,CAACC,KAAK,IAAI;IAC/B,MAAMlC,MAAM,GAAGkC,KAAK,CAACC,OAAO,CAACnC,MAAM;IACnC,MAAMC,MAAM,GAAGiC,KAAK,CAACC,OAAO,CAAClC,MAAM;IAEnC,IAAI,CAACD,MAAM,IAAI,CAACC,MAAM,EAAE;MACpBiC,KAAK,CAACP,SAAS,GAAG,mGAAmG;MACrH;IACJ;IAEA,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMV,IAAI,GAAG,MAAM3B,cAAc,CAACC,MAAM,EAAEC,MAAM,CAAC;MACjDuB,eAAe,CAACU,KAAK,EAAER,IAAI,CAAC;IAChC,CAAC;;IAED;IACAU,UAAU,CAAC,CAAC;;IAEZ;IACAC,WAAW,CAACD,UAAU,EAAE,KAAK,CAAC;EAClC,CAAC,CAAC;AACN,CAAC,CAAC,C","sources":["webpack://stock-ticker/./src/stock-ticker/view.js"],"sourcesContent":["// A helper function to fetch data from the Finnhub API\nconst fetchStockData = async (ticker, apiKey) => {\n    const quoteUrl = `https://finnhub.io/api/v1/quote?symbol=${ticker}&token=${apiKey}`;\n    const profileUrl = `https://finnhub.io/api/v1/stock/profile2?symbol=${ticker}&token=${apiKey}`;\n\n    try {\n        const [quoteResponse, profileResponse] = await Promise.all([\n            fetch(quoteUrl),\n            fetch(profileUrl)\n        ]);\n\n        const quoteData = await quoteResponse.json();\n        const profileData = await profileResponse.json();\n\n        if (quoteData.d === 0 || !profileData.name) {\n            return { error: \"Invalid ticker symbol.\" };\n        }\n\n        return {\n            companyName: profileData.name,\n            ticker: ticker.toUpperCase(),\n            price: quoteData.c.toFixed(2),\n            time: new Date().toLocaleTimeString()\n        };\n    } catch (error) {\n        console.error(\"Error fetching stock data:\", error);\n        return { error: \"Failed to fetch stock data.\" };\n    }\n};\n\n// Function to render the stock data into the block element\nconst renderStockData = (element, data) => {\n    if (data.error) {\n        element.innerHTML = `<p class=\"stock-ticker-error\">${data.error}</p>`;\n        return;\n    }\n\n    const html = `\n        <div class=\"stock-ticker-content\">\n            <h3 class=\"stock-ticker-company\">${data.companyName}</h3>\n            <p class=\"stock-ticker-symbol\">\n                <span class=\"stock-ticker-label\">Ticker:</span> ${data.ticker}\n            </p>\n            <p class=\"stock-ticker-price\">\n                <span class=\"stock-ticker-label\">Price:</span> $${data.price}\n            </p>\n            <p class=\"stock-ticker-time\">\n                <span class=\"stock-ticker-label\">Last Updated:</span> ${data.time}\n            </p>\n        </div>\n    `;\n    element.innerHTML = html;\n};\n\n// Find all stock ticker blocks and initialize them\ndocument.addEventListener('DOMContentLoaded', () => {\n    const stockTickerBlocks = document.querySelectorAll('.wp-block-create-block-stock-ticker');\n\n    stockTickerBlocks.forEach(block => {\n        const ticker = block.dataset.ticker;\n        const apiKey = block.dataset.apiKey;\n\n        if (!ticker || !apiKey) {\n            block.innerHTML = `<p class=\"stock-ticker-error\">Please set the Ticker Symbol and API Key in the block settings.</p>`;\n            return;\n        }\n\n        const updateData = async () => {\n            const data = await fetchStockData(ticker, apiKey);\n            renderStockData(block, data);\n        };\n\n        // Initial fetch\n        updateData();\n\n        // Refresh data every 10 seconds\n        setInterval(updateData, 10000);\n    });\n});\n"],"names":["fetchStockData","ticker","apiKey","quoteUrl","profileUrl","quoteResponse","profileResponse","Promise","all","fetch","quoteData","json","profileData","d","name","error","companyName","toUpperCase","price","c","toFixed","time","Date","toLocaleTimeString","console","renderStockData","element","data","innerHTML","html","document","addEventListener","stockTickerBlocks","querySelectorAll","forEach","block","dataset","updateData","setInterval"],"sourceRoot":""}